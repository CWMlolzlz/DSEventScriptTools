** EMEVD Information**

Explanation:

.emevd files are Event Scripting files. They control in-game events, 
 primarily managing event flags and entities found in the .msb files.
Events do not control game mechanics, but rather how the world reacts as
 the player character moves through it; you can think of events as the
 AI of the world itself.

Events consist of four parts:
 1) An *Event ID*, the unique designator for the event. A short description of the event
     is found in the .emeld file corresponding to the .emevd file.
    The Event ID can also be treated as an Event Flag ID, and is enabled when the event is completed.
 2) An ordered list of *instructions*, which will be described shortly. Instructions correspond to
     a single logical instruction in the scripting language. Commands are not low-level, but rather appear
     to have been specially created if the circumstance demands.
    Instructions are executed in order, although they can be skipped by other instructions.
 3) An unordered list of *parameter substitution instructions*. Some events are initialized with a set of parameters.
    Parameter substitution instructions describe which arguments of which instructions in the event should be replaced
     by these values that have been passed as parameters. This allows the same event to be re-used multiple times.
    These types of instructions will also be described in more detail later.
 4) An unknown value, either 0, 1 or 2. This may control how events are executed? 0 is most common (859 occurances), 
     1 is next most common (321 occurances) and 2 is rarest (37 occurances).
    (My current conjecture is that these control how / if events are restarted once they are completed. Some events might
      restart on map load, when the player sits at a bonfire, never, etc. I have no evidence for this.)

Instructions consist of three parts:
 1&2) The instruction class and index. This determines what the instruction is. Instruction classes are broad groupings
       of types of instructions for conditionals, entity manipulation, event control, etc.
 3) The argument array, a list of bytes that should be passed as arguments to the given instruction. Unfortunately, the data
     is packed to save space rather than using an array format, so interpreting this data requires first parsing the
     instruction class and index, and then looking up the argument format in the .emedf file in order to determine how the
     packed data should be split.
* In some instructions, an Event ID: 0 is mentioned. This refers to the Event itself, and will be enabled if the Event
   has been previously completed.

Parameter Substitution Instructions consist of 4 parts:
 1) The zero-indexed list index into the Event's list of instructions which determine the instruction whose argument array
     will have a parameter replaced.
 2) The starting byte of the chosen instruction's argument array to overwrite.
 3) The starting byte from the Event's parameter array to use for overwriting.
 4) The number of bytes to overwrite.
* Unfortunately, because the argument array (and parameter array, it turns out) is packed, it is not possible to determine
   which argument of the instruction is being replaced by which parameter. Instead, the argument array has to be parsed
   using the .emedf as described above. There is no (known) way of determining how the parameter array needs to be parsed,
   and presumably was contained in data that was stripped out of the final files. Instead, the parameter data must
   be retroactively parsed by determining the type of argument that each set of bytes is replacing -- which itself requires
   parsing the argument arrays of each instruction in the Event.
   
General Notes:
* Some types of instructions permit variable length argument arrays. So far, the only known such instruction is 2000[0], which
   is responsible for initializing other Events. Even though the .emedf file suggests that this instruction takes three 
   arguments, the third argument is actually of variable length, and contains the packed parameter data that is passed to
   the specified Event. However, since the parameter data must be retroactively parsed (see above), to parse this variable
   length argument data requires first completely decoding the entire Event that is referenced.
* The main flow control in Events uses (what I call) *registers* (lit. "Condition Group" in the .emedf). There are 15 registers:
   7 OR registers, 7 AND registers and the MAIN execution register. The registers are local to each Event. Each CONDITION instruction
   saves its result (TRUE or FALSE) into a certain register. As this happens, the type of register determines how the register's 
   current value changes. 
   
   The OR and AND registers apply their respective operations. That is, current_value = current_value && saved_value
   for AND registers, and similarly (with ||) for OR registers. It is not clear what happens if these registers are examined 
   before any values have been saved into them; for obvious reasons this never occurs in the .emevd files.
   
   The MAIN register simply replaces its current value with the saved value, and always starts with the value TRUE. When the MAIN
   register is TRUE, execution continues as normal. However, when the MAIN register is set to FALSE, instruction execution is skipped.
   It is not clear if some instructions are executed regardless of the state of the MAIN register (but I conjecture that this occurs).
   
   I also conjecture that some conditionals do not actually write TRUE or FALSE to MAIN, even when MAIN is selected as the desination
   register for that conditional. Instead, it seems as though these conditionals pause execution of the event until they are met. 
   In this sense, the event literally builds a condition group, i.e. a set of statements that must evaluate to TRUE before execution
   can continue. I suspect most conditionals behave this way, building "observer" condition groups that wait for specific conditions
   to be met before continuing with the rest of the event.

.emevd File Format:

c4 magic = EVD\0
z4
u1 magic_constant = 0xCC
z3
u4 file_size                        // Size of file in bytes
u4 event_count                      // Number of distinct events (collections of intstructions)
u4 event_table_offset               // Offset from start of file to table of events
u4 instruction_count                // Number of lines of instructions (concatenated from all events)
u4 instruction_table_offset         // Offset from start of file to table of instructions
z4
u4 dummy_offset = argument_offset
z4
u4 dummy_offset = argument_offset
u4 parameter_count                  // Number of parameter substitution instructions
u4 parameter_table_offset           // Offset from start of file to table of parameter substitution instructions
z4
u4 dummy_offset = file_size
u4 argument_size                    // Total bytes of fixed arguments (hard-coded arguments to instructions)
u4 argument_offset                  // Offset from start of file to table of arguments
z4
u4 dummy_offset = file_size
z4
--> event_table_offset
Event[event_count]:
    u4 event_id                 // Unique identifier. Description given in corresponding .emeld
    u4 number_of_instructions   // Number of instructions in this event
    u4 instructions_offset      // Offset from instruction_table_offset to get instructions for this event
    u4 number_of_parameters     // Number of parameter substitution instructions
    s4 parameters_offset        // Offset from parameter_table_offset to get parameter subsitution 
                                //   instructions for this event (-1 if number_of_parameters is 0)
    u4 unknown_int              // Always in {0, 1, 2}. Possibly related to when the event is executed.
    z4
--> instruction_table_offset
Instruction[instruction_count]:
    u4 instruction_class                // Type of instruction. Class descriptions are found in the .emedf
    u4 instruction_index                // Index of instruction in class. Index descriptions are found in the .emedf
    u4 bytes_in_instruction_argument    // Number of bytes used for the fixed argument array for this instruction
    u4 instruction_argument_offset      // Offset from argument_offset to get the fixed argument array for this instruction
    s4 -1 = 0xFFFFFFFF
    z4
--> argument_offset
ArgumentData // Packed data corresponding to the arguments for each instruction.
             //  Data is packed according to native size and alignment.
             //  The argument data for each instruction is zero-padded so that it is 
             //   a multiple of 4 bytes long.
z4: termination_byte // This byte is included in the bytecount given by argument_size, even though it is not actually part of ArgumentData
--> parameter_table_offset
Parameter[parameter_count]:
    u4 event_instruction_number     // "Line index" of the instruction in the event to apply this parameter substitution to
    u4 destination_starting_byte    // Starting byte in the argument array to overwrite
    u4 source_starting_byte         // Starting byte of the parameter array to use for overwriting
    u4 length                       // Number of bytes to copy from the parameter array to the instruction's argument array
    z4
EOF
